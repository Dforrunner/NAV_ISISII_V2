<HTML>
<HEAD>
    <TITLE>Service Section TOC</TITLE>
    <LINK href="../style.css" rel="STYLESHEET" type="text/css">
    <SCRIPT LANGUAGE="JavaScript1.1">
<!-- begin hiding
var indentPixels = 15
var collapsedWidget = "../images/plus.gif"
var expandedWidget = "../images/minus.gif"
var endpointWidget = "../images/end.gif"
var widgetWidth = 17
var widgetHeight = 18
var displayTarget = "mainframe"
// AHJO - In the folowing db the fourth field (after the xml file name) is new and set to "0" 
var db = new Array()
 db[1] = new dbRecord(true, "DT-466E and 530E Diesel Engine Diagnostics Model Years 1999-2000","eges1751_1.xml","0",0,"","YES")
 db[2] = new dbRecord(true, "Engine Control System Overview","eges1751_2.xml","0",0,"","YES")
 db[3] = new dbRecord(false, "FUEL SYSTEM ","eges1751_2.xml","0",1,"","YES")
 db[4] = new dbRecord(false, "Fuel Flow","eges1751_3.xml","0",1,"","YES")
 db[5] = new dbRecord(true, "Injection Control Pressure System","eges1751_4.xml","0",1,"","")
 db[6] = new dbRecord(false, "Injection Control Pressure System Operation","eges1751_4.xml","0",2,"","YES")
 db[7] = new dbRecord(false, "Injection Pressure Control","eges1751_5.xml","0",2,"","YES")
 db[8] = new dbRecord(false, "IPR Valve Operation","eges1751_6.xml","0",2,"","YES")
 db[9] = new dbRecord(true, "Heui Injector Operation","eges1751_7.xml","0",1,"","")
 db[10] = new dbRecord(false, "Service Procedure","eges1751_7.xml","0",2,"","YES")
 db[11] = new dbRecord(false, "Split-Shot Injectors","eges1751_8.xml","0",2,"","YES")
 db[12] = new dbRecord(true, "Electronic Control Module","eges1751_9.xml","0",1,"","")
 db[13] = new dbRecord(false, "Operation and Function","eges1751_9.xml","0",2,"","YES")
 db[14] = new dbRecord(false, "Reference Voltage","eges1751_10.xml","0",2,"","YES")
 db[15] = new dbRecord(false, "Input Voltage Signals","eges1751_11.xml","0",2,"","YES")
 db[16] = new dbRecord(false, "Microprocessor Input and Output","eges1751_12.xml","0",2,"","YES")
 db[17] = new dbRecord(false, "Actuators ","eges1751_13.xml","0",2,"","YES")
 db[18] = new dbRecord(true, "Engine And Vehicle Sensors","eges1751_14.xml","0",1,"","")
 db[19] = new dbRecord(false, "Service Procedure","eges1751_14.xml","0",2,"","YES")
 db[20] = new dbRecord(false, "Thermistor","eges1751_15.xml","0",2,"","YES")
 db[21] = new dbRecord(false, "Potentiometer","eges1751_16.xml","0",2,"","YES")
 db[22] = new dbRecord(false, "Variable Capacitance Sensor","eges1751_17.xml","0",2,"","YES")
 db[23] = new dbRecord(false, "Hall Effect Sensor","eges1751_18.xml","0",2,"","YES")
 db[24] = new dbRecord(false, "Magnetic Pickup","eges1751_19.xml","0",2,"","YES")
 db[25] = new dbRecord(false, "Switch Sensors","eges1751_20.xml","0",2,"","YES")
 db[26] = new dbRecord(true, "Vehicle Features","eges1751_21.xml","0",1,"","")
 db[27] = new dbRecord(false, "Standard Features","eges1751_22.xml","0",2,"","YES")
 db[28] = new dbRecord(false, "Optional Features","eges1751_23.xml","0",2,"","YES")
 db[29] = new dbRecord(true, "Diagnostic Software Operation","eges1751_24.xml","0",1,"","")
 db[30] = new dbRecord(false, "Diagnostic Trouble Code Detection","eges1751_24.xml","0",2,"","YES")
 db[31] = new dbRecord(false, "Diagnostic Trouble Code Procedures","eges1751_25.xml","0",2,"","YES")
 db[32] = new dbRecord(false, "Service Procedure","eges1751_26.xml","0",2,"","YES")
 db[33] = new dbRecord(false, "Continuous Monitoring","eges1751_27.xml","0",2,"","YES")
 db[34] = new dbRecord(false, "Diagnostic Tests","eges1751_28.xml","0",2,"","YES")
 db[35] = new dbRecord(false, "Service Procedure","eges1751_29.xml","0",2,"","YES")
 db[36] = new dbRecord(false, "Service Procedure","eges1751_30.xml","0",2,"","YES")
 db[37] = new dbRecord(false, "Service Procedure","eges1751_31.xml","0",2,"","YES")
 db[38] = new dbRecord(false, "Key-On Engine Off Continuous Monitor Test","eges1751_32.xml","0",2,"","YES")
 db[39] = new dbRecord(false, "Key-On Engine Running Standard Test","eges1751_33.xml","0",2,"","YES")
 db[40] = new dbRecord(false, "Service Procedure","eges1751_34.xml","0",2,"","YES")
 db[41] = new dbRecord(false, "Service Procedure","eges1751_35.xml","0",2,"","YES")
 db[42] = new dbRecord(true, "Mechanical Diagnostics","eges1751_36.xml","0",0,"","YES")
 db[43] = new dbRecord(false, "Introduction","eges1751_37.xml","0",1,"","YES")
 db[44] = new dbRecord(true, "Hard Start / No Start Diagnostics","eges1751_38.xml","0",1,"","")
 db[45] = new dbRecord(false, "Fuel Check","eges1751_39.xml","0",2,"","YES")
 db[46] = new dbRecord(false, "Engine Systems Check","eges1751_40.xml","0",2,"","YES")
 db[47] = new dbRecord(false, "Engine Oil Check","eges1751_41.xml","0",2,"","YES")
 db[48] = new dbRecord(false, "Intake / Exhaust Restriction Check","eges1751_42.xml","0",2,"","YES")
 db[49] = new dbRecord(false, "Purpose","eges1751_43.xml","0",2,"","YES")
 db[50] = new dbRecord(false, "EST Key On Engine OFF Standard Test","eges1751_44.xml","0",2,"","YES")
 db[51] = new dbRecord(false, "EST Key On Engine OFF Injector Test ","eges1751_45.xml","0",2,"","YES")
 db[52] = new dbRecord(false, "Purpose","eges1751_46.xml","0",2,"","YES")
 db[53] = new dbRecord(false, "EST Data List","eges1751_47.xml","0",2,"","YES")
 db[54] = new dbRecord(false, "Purpose","eges1751_48.xml","0",2,"","YES")
 db[55] = new dbRecord(false, "Engine Cranking Test","eges1751_49.xml","0",2,"","YES")
 db[56] = new dbRecord(false, "Injection Control Pressure Test","eges1751_50.xml","0",2,"","YES")
 db[57] = new dbRecord(false, "Purpose","eges1751_51.xml","0",2,"","YES")
 db[58] = new dbRecord(false, "Fuel Pump Pressure Test","eges1751_52.xml","0",2,"","YES")
 db[59] = new dbRecord(false, "Tools Required","eges1751_53.xml","0",2,"","YES")
 db[60] = new dbRecord(true, "Performance Diagnostics","eges1751_54.xml","0",1,"","")
 db[61] = new dbRecord(false, "Engine Oil Check","eges1751_55.xml","0",2,"","YES")
 db[62] = new dbRecord(false, "Fuel Pressure Test","eges1751_56.xml","0",2,"","YES")
 db[63] = new dbRecord(false, "Purpose","eges1751_57.xml","0",2,"","YES")
 db[64] = new dbRecord(false, "EST Diagnostic Trouble Codes (DTCs)","eges1751_58.xml","0",2,"","YES")
 db[65] = new dbRecord(false, "EST Engine OFF Standard Test ","eges1751_59.xml","0",2,"","YES")
 db[66] = new dbRecord(false, "EST Engine OFF Injector Test","eges1751_60.xml","0",2,"","YES")
 db[67] = new dbRecord(false, "Purpose","eges1751_61.xml","0",2,"","YES")
 db[68] = new dbRecord(false, "Intake Restriction Test","eges1751_62.xml","0",2,"","YES")
 db[69] = new dbRecord(false, "EST Engine Running Standard Test","eges1751_63.xml","0",2,"","YES")
 db[70] = new dbRecord(false, "EST Engine Running Injector Test","eges1751_64.xml","0",2,"","YES")
 db[71] = new dbRecord(false, "Fuel Pressure Test (Full Load)","eges1751_65.xml","0",2,"","YES")
 db[72] = new dbRecord(false, "ICP Pressure Test","eges1751_66.xml","0",2,"","YES")
 db[73] = new dbRecord(false, "Boost Pressure&#160;Test","eges1751_67.xml","0",2,"","YES")
 db[74] = new dbRecord(false, "Crankcase Pressure Test ","eges1751_68.xml","0",2,"","YES")
 db[75] = new dbRecord(false, "Wastegate Actuator Test","eges1751_69.xml","0",2,"","YES")
 db[76] = new dbRecord(false, "Exhaust Restriction Test","eges1751_70.xml","0",2,"","YES")
 db[77] = new dbRecord(false, "Valve Clearance Test","eges1751_71.xml","0",2,"","YES")
 db[78] = new dbRecord(false, "Service Procedure","eges1751_72.xml","0",1,"","YES")
 db[79] = new dbRecord(true, "Performance Specifications","eges1751_73.xml","0",1,"","")
 db[80] = new dbRecord(false, "1997 Model Year ","eges1751_74.xml","0",2,"","YES")
 db[81] = new dbRecord(false, "1998 Model Year","eges1751_75.xml","0",2,"","YES")
 db[82] = new dbRecord(false, "1999 Model Year","eges1751_76.xml","0",2,"","YES")
 db[83] = new dbRecord(false, "2000 Model Year","eges1751_77.xml","0",2,"","YES")
 db[84] = new dbRecord(true, "Electronic Control System Diagnostics","eges1751_78.xml","0",0,"","YES")
 db[85] = new dbRecord(true, "Introduction","eges1751_79.xml","0",1,"","")
 db[86] = new dbRecord(false, "Service Procedure","eges1751_79.xml","0",2,"","YES")
 db[87] = new dbRecord(false, "Service Procedure","eges1751_80.xml","0",2,"","YES")
 db[88] = new dbRecord(false, "Electronic Control System Diagnostic form EGED 185-2","eges1751_81.xml","0",1,"","YES")
 db[89] = new dbRecord(false, "Diagnostic Trouble Code Circuit Index","eges1751_FC.xml","0",1,"","YES")
 db[90] = new dbRecord(true, "Sensor And Actuator Locations","eges1751_83.xml","0",1,"","")
 db[91] = new dbRecord(false, "Service Procedure","eges1751_83.xml","0",2,"","YES")
 db[92] = new dbRecord(false, "Service Procedure","eges1751_84.xml","0",2,"","YES")
 db[93] = new dbRecord(true, "Diagnostic Procedures For The Electronic Control System","eges1751_85.xml","0",1,"","")
 db[94] = new dbRecord(false, "Sensor And Actuator Diagnostics","eges1751_85.xml","0",2,"","YES")
 db[95] = new dbRecord(false, "Connector Voltage Checks","eges1751_86.xml","0",2,"","YES")
 db[96] = new dbRecord(false, "Connector Checks To Ground","eges1751_87.xml","0",2,"","YES")
 db[97] = new dbRecord(false, "Harness Resistance Tests","eges1751_88.xml","0",2,"","YES")
 db[98] = new dbRecord(false, "Master Diagnostics Tests For Three Wire Pressure And Aps/ivs Sensors","eges1751_89.xml","0",2,"","YES")
 db[99] = new dbRecord(false, "Open Circuit Voltage Check","eges1751_90.xml","0",2,"","YES")
 db[100] = new dbRecord(false, "V<subscript>REF</subscript> Voltage Check","eges1751_91.xml","0",2,"","YES")
 db[101] = new dbRecord(false, "Sensor Ground Check","eges1751_92.xml","0",2,"","YES")
 db[102] = new dbRecord(false, "Master Diagnostics Tests For Two Wire Temperature Sensors","eges1751_93.xml","0",2,"","YES")
 db[103] = new dbRecord(false, "Sensor Ground Check","eges1751_94.xml","0",2,"","YES")
 db[104] = new dbRecord(false, "Operational Voltage Checks","eges1751_95.xml","0",2,"","YES")
 db[105] = new dbRecord(false, "Service Procedure","eges1751_96.xml","0",1,"","YES")
 db[106] = new dbRecord(true, "Circuit Function And Diagnostics","eges1751_97.xml","0",1,"","")
 db[107] = new dbRecord(false, "Accelerator  Position Sensor And Idle Validation Switch (APS/IVS)","eges1751_98.xml","0",2,"","YES")
 db[108] = new dbRecord(false, "ATA Communications (Data Communications Link, ATA Link)","eges1751_99.xml","0",2,"","YES")
 db[109] = new dbRecord(false, "Barometric Pressure (BAP) Sensor","eges1751_100.xml","0",2,"","YES")
 db[110] = new dbRecord(false, "Brake Switch Circuits (Brake)","eges1751_101.xml","0",2,"","YES")
 db[111] = new dbRecord(false, "Camshaft Position Sensor (CMP)","eges1751_102.xml","0",2,"","YES")
 db[112] = new dbRecord(false, "Change Oil Lamp (COL)","eges1751_103.xml","0",2,"","YES")
 db[113] = new dbRecord(false, "Electronic Control Module Power Supply (ECM PWR)","eges1751_104.xml","0",2,"","YES")
 db[114] = new dbRecord(false, "ECM Self Diagnostics","eges1751_105.xml","0",2,"","YES")
 db[115] = new dbRecord(false, "Electronic Pressure Governor","eges1751_106.xml","0",2,"","YES")
 db[116] = new dbRecord(false, "Engine Coolant Level System","eges1751_107.xml","0",2,"","YES")
 db[117] = new dbRecord(false, "Engine Coolant Temperature Sensor (ECT)","eges1751_108.xml","0",2,"","YES")
 db[118] = new dbRecord(false, "Engine Crank Inhibit System (ECI)","eges1751_109.xml","0",2,"","YES")
 db[119] = new dbRecord(false, "Engine Data Line with Allison AT/MT Transmission (EDL)","eges1751_110.xml","0",2,"","YES")
 db[120] = new dbRecord(false, "Engine Diagnostics Switch and Engine Warning Light","eges1751_111.xml","0",2,"","YES")
 db[121] = new dbRecord(false, "Engine Fan Control","eges1751_112.xml","0",2,"","YES")
 db[122] = new dbRecord(false, "Engine Oil Pressure Sensor (EOP)","eges1751_113.xml","0",2,"","YES")
 db[123] = new dbRecord(false, "Engine Oil Temperature Sensor (EOT)","eges1751_114.xml","0",2,"","YES")
 db[124] = new dbRecord(false, "Idle Shutdown Timer (IST)","eges1751_115.xml","0",2,"","YES")
 db[125] = new dbRecord(false, "Injection Control Pressure Sensor (ICP)","eges1751_116.xml","0",2,"","YES")
 db[126] = new dbRecord(false, "Injector Drive Circuits (INJ)","eges1751_117.xml","0",2,"","YES")
 db[127] = new dbRecord(false, "Injection Pressure Regulator (IPR)","eges1751_118.xml","0",2,"","YES")
 db[128] = new dbRecord(false, "Injection Pressure Regulation System (IPR_SYS)","eges1751_119.xml","0",2,"","YES")
 db[129] = new dbRecord(false, "Intake Air Temperature Sensor (IAT)","eges1751_120.xml","0",2,"","YES")
 db[130] = new dbRecord(false, "Manifold Absolute Pressure Sensor (MAP)","eges1751_121.xml","0",2,"","YES")
 db[131] = new dbRecord(false, "Oil Water Lamp (OWL) and Engine Warning and Protection System (EWPS)","eges1751_122.xml","0",2,"","YES")
 db[132] = new dbRecord(false, "Radiator Shutter Enable (RSE)","eges1751_123.xml","0",2,"","YES")
 db[133] = new dbRecord(false, "Remote Accelerator Position Sensor (RPS)","eges1751_124.xml","0",2,"","YES")
 db[134] = new dbRecord(false, "Remote PTO Speed Control (RPTO)","eges1751_125.xml","0",2,"","YES")
 db[135] = new dbRecord(false, "Speed Control Command Switches (SCCS)","eges1751_126.xml","0",2,"","YES")
 db[136] = new dbRecord(false, "Tachometer Output Circuit","eges1751_127.xml","0",2,"","YES")
 db[137] = new dbRecord(false, "Two Speed Axle Speedometer Circuit","eges1751_128.xml","0",2,"","YES")
 db[138] = new dbRecord(false, "Vehicle Retarder (VRE)","eges1751_129.xml","0",2,"","YES")
 db[139] = new dbRecord(false, "Voltage Reference (V<subscript>REF</subscript>) ","eges1751_130.xml","0",2,"","YES")
 db[140] = new dbRecord(false, "Vehicle Speed Sensor Signal (VSS) ","eges1751_131.xml","0",2,"","YES")
 db[141] = new dbRecord(true, "Supplemental Diagnostic Analysis","eges1751_132.xml","0",0,"","YES")
 db[142] = new dbRecord(true, "Diagnostic Analysis Procedures","eges1751_133.xml","0",1,"","")
 db[143] = new dbRecord(false, "Oil Consumption","eges1751_133.xml","0",2,"","YES")
 db[144] = new dbRecord(false, "Fuel Consumption","eges1751_134.xml","0",2,"","YES")
 db[145] = new dbRecord(false, "High Coolant Temperature or Coolant Loss","eges1751_135.xml","0",2,"","YES")
 db[146] = new dbRecord(false, "Excessive Exhaust Smoke","eges1751_136.xml","0",2,"","YES")
 db[147] = new dbRecord(false, "Fuel Dilution","eges1751_137.xml","0",2,"","YES")
 db[148] = new dbRecord(false, "Coolant in Lubricating Oil or Lubricating Oil in Coolant","eges1751_138.xml","0",2,"","YES")
 db[149] = new dbRecord(false, "Excessive Crankcase Pressure","eges1751_139.xml","0",2,"","YES")
 db[150] = new dbRecord(false, "Lube Oil in Fuel","eges1751_140.xml","0",2,"","YES")
 db[151] = new dbRecord(true, "Diagnosing Scuffed Injectors","eges1751_141.xml","0",1,"","")
 db[152] = new dbRecord(false, "Key-On Engine-Running Injector Test","eges1751_141.xml","0",2,"","YES")
 db[153] = new dbRecord(false, "Troubleshooting","eges1751_142.xml","0",2,"","YES")
 db[154] = new dbRecord(false, "Test Procedure - Using the EST and Master Diagnostics","eges1751_143.xml","0",2,"","YES")
 db[155] = new dbRecord(false, "Snapshot Recording and Replay of Cylinder Contribution Test","eges1751_144.xml","0",2,"","YES")
 db[156] = new dbRecord(false, "Service Procedure","eges1751_145.xml","0",2,"","YES")
 db[157] = new dbRecord(true, "Diagnostic Tools","eges1751_146.xml","0",0,"","YES")
 db[158] = new dbRecord(true, "Tools","eges1751_147.xml","0",1,"","")
 db[159] = new dbRecord(false, "Beyers Model 200 Pressure Test Kit (ztse2239)","eges1751_148.xml","0",2,"","YES")
 db[160] = new dbRecord(false, "Gauge Bar Tool (ps94-831-3)","eges1751_149.xml","0",2,"","YES")
 db[161] = new dbRecord(false, "Crankcase Pressure Restriction Tool (ztse4039)","eges1751_150.xml","0",2,"","YES")
 db[162] = new dbRecord(false, "Dwyer Slack Tube Manometer","eges1751_151.xml","0",2,"","YES")
 db[163] = new dbRecord(false, "Terminal Test Adapter Kit","eges1751_152.xml","0",2,"","YES")
 db[164] = new dbRecord(false, "Injector Test Harness (ztse4401)","eges1751_153.xml","0",2,"","YES")
 db[165] = new dbRecord(false, "3-wire Pressure Sensor Breakout Tee (ztse4347)","eges1751_154.xml","0",2,"","YES")
 db[166] = new dbRecord(false, "2-wire Temperature Sensor Breakout Tee (ztse4483)","eges1751_155.xml","0",2,"","YES")
 db[167] = new dbRecord(false, "IPR VAlVE BREAKOUT TEE (ZTSE4484)","eges1751_156.xml","0",2,"","YES")
 db[168] = new dbRecord(false, "Aps / Ivs Sensor Breakout Tee (ztse4485)","eges1751_157.xml","0",2,"","YES")
 db[169] = new dbRecord(false, "Cmp Sensor Breakout Tee (ztse4486)","eges1751_158.xml","0",2,"","YES")
 db[170] = new dbRecord(false, "Icp Adapter / Plug Kit (ztse4359)","eges1751_159.xml","0",2,"","YES")
 db[171] = new dbRecord(false, "Fluke 88&#8482; Digital Multimeter (ztse4357)","eges1751_160.xml","0",2,"","YES")
 db[172] = new dbRecord(false, "Breakout Box (ztse4445)","eges1751_161.xml","0",2,"","YES")
 db[173] = new dbRecord(true, "Master Diagnostics (md 32)","eges1751_162.xml","0",1,"","")
 db[174] = new dbRecord(false, "Starting Master Diagnostics From The Windows Desktop","eges1751_163.xml","0",2,"","YES")
 db[175] = new dbRecord(false, "Opening A Com Port","eges1751_164.xml","0",2,"","YES")
 db[176] = new dbRecord(false, "TEXT WINDOW and ADDING PARAMETER IDENTIFIERS (PID)","eges1751_165.xml","0",2,"","YES")
 db[177] = new dbRecord(false, "GRAPHIC WINDOW and ADDING PARAMETER IDENTIFIERS (PID)","eges1751_166.xml","0",2,"","YES")
 db[178] = new dbRecord(false, "Opening A Session File","eges1751_167.xml","0",2,"","YES")
 db[179] = new dbRecord(false, "Displaying Sensor Voltages","eges1751_168.xml","0",2,"","YES")
 db[180] = new dbRecord(false, "Diagnostic Testing","eges1751_169.xml","0",2,"","YES")
 db[181] = new dbRecord(false, "Check And Clear Diagnostic Trouble Codes (dtc)","eges1751_170.xml","0",2,"","YES")
 db[182] = new dbRecord(false, "View Accumulators (vehicle Information)","eges1751_171.xml","0",2,"","YES")
 db[183] = new dbRecord(false, "Programmable Parameters, Change / View","eges1751_172.xml","0",2,"","YES")
 db[184] = new dbRecord(false, "SNAPSHOT- RECORD and REPLAY","eges1751_173.xml","0",2,"","YES")
 db[185] = new dbRecord(false, "Est Help","eges1751_174.xml","0",2,"","YES")
 db[186] = new dbRecord(true, "Digital Multimeter Use","eges1751_175.xml","0",1,"","")
 db[187] = new dbRecord(false, "Voltage","eges1751_175.xml","0",2,"","YES")
 db[188] = new dbRecord(false, "Ohm's Law ","eges1751_176.xml","0",2,"","YES")
 db[189] = new dbRecord(false, "Ammeter","eges1751_177.xml","0",2,"","YES")
 db[190] = new dbRecord(false, "Ohmmeter","eges1751_178.xml","0",2,"","YES")
 db[191] = new dbRecord(false, "Troubleshooting","eges1751_179.xml","0",2,"","YES")
 db[192] = new dbRecord(false, "Electronic Circuit Testing","eges1751_180.xml","0",2,"","YES")
 db[193] = new dbRecord(true, "Harness Repair","eges1751_181.xml","0",0,"","YES")
 db[194] = new dbRecord(false, "Description","eges1751_182.xml","0",1,"","YES")
 db[195] = new dbRecord(false, "Contact insertion","eges1751_183.xml","0",1,"","YES")
 db[196] = new dbRecord(false, "Connector details","eges1751_184.xml","0",1,"","YES")
 db[197] = new dbRecord(false, "Terminal inspection","eges1751_185.xml","0",1,"","YES")
 db[198] = new dbRecord(false, "Standard terminal replacement","eges1751_186.xml","0",1,"","YES")
 db[199] = new dbRecord(false, "Terminal replacement for sealed weather pack and metri-pack","eges1751_187.xml","0",1,"","YES")
 db[200] = new dbRecord(false, "Splice clip installation","eges1751_188.xml","0",1,"","YES")
 db[201] = new dbRecord(false, "Installation of crimp and seal splice sleeves ","eges1751_189.xml","0",1,"","YES")
 db[202] = new dbRecord(false, "Locking wedge connectors","eges1751_190.xml","0",1,"","YES")
 db[203] = new dbRecord(false, "Service Procedure","eges1751_191.xml","0",1,"","YES")
 db[204] = new dbRecord(false, "Service Procedure","eges1751_192.xml","0",1,"","YES")
 db[205] = new dbRecord(false, "Service Procedure","eges1751_193.xml","0",1,"","YES")
 db[206] = new dbRecord(false, "Service Procedure","eges1751_194.xml","0",1,"","YES")
 db[207] = new dbRecord(false, "Service Procedure","eges1751_195.xml","0",1,"","YES")
 db[208] = new dbRecord(false, "Packard connectors","eges1751_196.xml","0",1,"","YES")
 db[209] = new dbRecord(false, "Service Procedure","eges1751_197.xml","0",1,"","YES")
 db[210] = new dbRecord(false, "Service Procedure","eges1751_198.xml","0",1,"","YES")
 db[211] = new dbRecord(true, "Glossary Of Technical Terms","eges1751_199.xml","0",0,"","YES")
 db[212] = new dbRecord(false, "PROGRAMMABLE Parameters for MASTER DIAGNOSTICS ","eges1751_200.xml","0",1,"","YES")
// AHJO - In the following function the parameter 'occurs' was added Oct/Nov 2001
function dbRecord(mother,display,URL,occurs,indent,statusMsg,link){
	this.mother = mother   // is this item a parent?
	this.display = display // text to display
	this.URL = URL         // used to link to TOC
	this.occurances =  occurs  // how many times does search occur - THIS LINE WAS ADDED by AHJO
	this.indent = indent   // how many levels nested?
	this.statusMsg = statusMsg  // descriptive text for status bar 
	this.link = link  //  link tied to text; if empty string, item appears as straight text
	return this
}
// pre-load all images into cache
var collapsedImg = new Image(widgetWidth,widgetHeight)
collapsedImg.src = collapsedWidget
var expandedImg = new Image(widgetWidth,widgetHeight)
expandedImg.src = expandedWidget
var endpointImg = new Image(widgetWidth,widgetHeight)
endpointImg.src = endpointWidget
// mainframeURL = parent.mainframe.document.URL // get URL of mainframe 
// ** functions that get and set persistent cookie data **
// set cookie data
var mycookie = document.cookie
function setCurrState(setting) {
        mycookie = document.cookie = "currState=" + escape(setting)
}
// retrieve cookie data
function getCurrState() {
        var label = "currState="
        var labelLen = label.length
        var cLen = mycookie.length
        var i = 0
        while (i < cLen) {
                var j = i + labelLen
                if (mycookie.substring(i,j) == label) {
                        var cEnd = mycookie.indexOf(";",j)
                        if (cEnd ==     -1) {
                                cEnd = mycookie.length
                       }
                        return unescape(mycookie.substring(j,cEnd))
                }
               i++
       }
        return ""
}
// **function that updates persistent storage of state**
// toggles an outline mother entry, storing new value in the cookie
function toggle(n) {
	if (n != 0) {
		var newString = ""
		var currState = getCurrState() // of whole outline
		var expanded = currState.charAt(n-1) // of clicked item
		newString += currState.substring(0,n-1)
		newString += expanded ^ 1 // Bitwise XOR clicked item
		newString += currState.substring(n,currState.length)
		setCurrState(newString) // write new state back to cookie
	}
}
// **functions used in assembling updated outline**
// returns the proper GIF file name for each entry's control
function getGIF(n) {
	var mom = db[n].mother  // is entry a parent?
	var expanded = getCurrState().charAt(n-1) // of clicked item
	if (!mom) {
		return endpointWidget
	} else {
		if (expanded == 1) {
			return expandedWidget
		}
	}
	return collapsedWidget
}
// returns the proper status line text based on the icon style
function getGIFStatus(n) {
	var mom = db[n].mother  // is entry a parent
	var expanded = getCurrState().charAt(n-1) // of rolled item
	if (!mom) {
		return "No further items"
	} else {
		if (expanded == 1) {
			return "Click to collapse nested items"
		}
	}
	return "Click to expand nested items"
}
// initialize 'current state' storage field
if (getCurrState() == "" || getCurrState().length != (db.length-1)) {
	initState = ""
	for (i = 1; i < db.length; i++) {
		initState += "0"
	}
	setCurrState(initState)
}
// end -->

    </SCRIPT>
</HEAD>
<BODY>
<h3>DT-466E and 530E Diesel Engine Diagnostics Model Years 1999-2000</h3>
<SCRIPT LANGUAGE="JavaScript1.1">
<!-- start
// build new outline based on the values of the cookie
// and data points in the outline data array.
// This fires each time the user clicks on a control,
// because the HREF for each one reloads the current document.
var newOutline = ""
var prevIndentDisplayed = 0
var showMyDaughter = 0
// cycle through each entry in the outline array
for (var i = 1; i < db.length; i++) {
	var theGIF = getGIF(i)				// get the image
	var theGIFStatus = getGIFStatus(i)  // get the status message
	var currIndent = db[i].indent		// get the indent level
	var expanded = getCurrState().charAt(i-1) // current state
        db[i].currentrow = ""

	if (currIndent == 0 || currIndent == 1 || db[i].currentrow == "currentrow" || currIndent <= prevIndentDisplayed || (showMyDaughter == 1 && (currIndent - prevIndentDisplayed == 1))) {
 // Phil added the if to remove the image from before the root element
         if (currIndent != 0) {
			newOutline += "<SPAN class=\"" + db[i].currentrow + "\" style=\" position:relative;left:" + (indentPixels * currIndent) + "px;width:200px\"><A HREF=\"javascript:history.go(0)\" onMouseOver=\"window.status=\'" + theGIFStatus + "\';return true;\" onClick=\"toggle(" + i + ");return " + "\">"
			newOutline += "<IMG ALIGN=TOP SRC=\"" + theGIF + "\" HEIGHT=" + widgetHeight + " WIDTH=" + widgetWidth + " BORDER=0></A>"
			newOutline += "<SPAN title=\"" + db[i].display + "\" style=\"width:" + (200-widgetWidth) + "px\">"
			}
			if (db[i].link == "" || db[i].link == null) {
				newOutline += " <small'>" +  db[i].display + "</small></SPAN></SPAN>" + "<BR>"	// no link, just a listed item
			} else {
                 if (db[i].occurances > 0)	{
				newOutline += " <A HREF=\"" + db[i].URL + "\" TARGET=\"" + displayTarget + "\" onMouseOver=\"window.status=\'" + db[i].statusMsg + "\';return true;\"><small>" + db[i].display + "&nbsp;&nbsp;("
 + db[i].occurances + ")</small></A></SPAN></SPAN><BR>"
			} else {
				newOutline += " <A HREF=\"" + db[i].URL + "\" TARGET=\"" + displayTarget + "\" onMouseOver=\"window.status=\'" + db[i].statusMsg + "\';return true;\"><small'>" + db[i].display + "</small></A></SPAN></SPAN><BR>"
			}
			}
		prevIndentDisplayed = currIndent
		showMyDaughter = expanded
		if (db.length > 25) {
			document.write(newOutline)
			newOutline = ""
		}
	}
}
document.write(newOutline)
// end -->

</SCRIPT>
</BODY>
</html>
